// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: whatsapp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhatsAppServiceClient is the client API for WhatsAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhatsAppServiceClient interface {
	Connect(ctx context.Context, in *WhatsAppConnectRequest, opts ...grpc.CallOption) (*WhatsAppConnectResponse, error)
	Message(ctx context.Context, in *WhatsAppMessageRequest, opts ...grpc.CallOption) (*WhatsAppMessageResponse, error)
	Reply(ctx context.Context, in *WhatsAppReplyRequest, opts ...grpc.CallOption) (*WhatsAppReplyResponse, error)
	QR(ctx context.Context, in *WhatsAppQRRequest, opts ...grpc.CallOption) (WhatsAppService_QRClient, error)
}

type whatsAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhatsAppServiceClient(cc grpc.ClientConnInterface) WhatsAppServiceClient {
	return &whatsAppServiceClient{cc}
}

func (c *whatsAppServiceClient) Connect(ctx context.Context, in *WhatsAppConnectRequest, opts ...grpc.CallOption) (*WhatsAppConnectResponse, error) {
	out := new(WhatsAppConnectResponse)
	err := c.cc.Invoke(ctx, "/proto.WhatsAppService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsAppServiceClient) Message(ctx context.Context, in *WhatsAppMessageRequest, opts ...grpc.CallOption) (*WhatsAppMessageResponse, error) {
	out := new(WhatsAppMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.WhatsAppService/Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsAppServiceClient) Reply(ctx context.Context, in *WhatsAppReplyRequest, opts ...grpc.CallOption) (*WhatsAppReplyResponse, error) {
	out := new(WhatsAppReplyResponse)
	err := c.cc.Invoke(ctx, "/proto.WhatsAppService/Reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsAppServiceClient) QR(ctx context.Context, in *WhatsAppQRRequest, opts ...grpc.CallOption) (WhatsAppService_QRClient, error) {
	stream, err := c.cc.NewStream(ctx, &WhatsAppService_ServiceDesc.Streams[0], "/proto.WhatsAppService/QR", opts...)
	if err != nil {
		return nil, err
	}
	x := &whatsAppServiceQRClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WhatsAppService_QRClient interface {
	Recv() (*WhatsAppQRResponse, error)
	grpc.ClientStream
}

type whatsAppServiceQRClient struct {
	grpc.ClientStream
}

func (x *whatsAppServiceQRClient) Recv() (*WhatsAppQRResponse, error) {
	m := new(WhatsAppQRResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WhatsAppServiceServer is the server API for WhatsAppService service.
// All implementations must embed UnimplementedWhatsAppServiceServer
// for forward compatibility
type WhatsAppServiceServer interface {
	Connect(context.Context, *WhatsAppConnectRequest) (*WhatsAppConnectResponse, error)
	Message(context.Context, *WhatsAppMessageRequest) (*WhatsAppMessageResponse, error)
	Reply(context.Context, *WhatsAppReplyRequest) (*WhatsAppReplyResponse, error)
	QR(*WhatsAppQRRequest, WhatsAppService_QRServer) error
	mustEmbedUnimplementedWhatsAppServiceServer()
}

// UnimplementedWhatsAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWhatsAppServiceServer struct {
}

func (UnimplementedWhatsAppServiceServer) Connect(context.Context, *WhatsAppConnectRequest) (*WhatsAppConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedWhatsAppServiceServer) Message(context.Context, *WhatsAppMessageRequest) (*WhatsAppMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (UnimplementedWhatsAppServiceServer) Reply(context.Context, *WhatsAppReplyRequest) (*WhatsAppReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (UnimplementedWhatsAppServiceServer) QR(*WhatsAppQRRequest, WhatsAppService_QRServer) error {
	return status.Errorf(codes.Unimplemented, "method QR not implemented")
}
func (UnimplementedWhatsAppServiceServer) mustEmbedUnimplementedWhatsAppServiceServer() {}

// UnsafeWhatsAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhatsAppServiceServer will
// result in compilation errors.
type UnsafeWhatsAppServiceServer interface {
	mustEmbedUnimplementedWhatsAppServiceServer()
}

func RegisterWhatsAppServiceServer(s grpc.ServiceRegistrar, srv WhatsAppServiceServer) {
	s.RegisterService(&WhatsAppService_ServiceDesc, srv)
}

func _WhatsAppService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhatsAppConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WhatsAppService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).Connect(ctx, req.(*WhatsAppConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsAppService_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhatsAppMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WhatsAppService/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).Message(ctx, req.(*WhatsAppMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsAppService_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhatsAppReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WhatsAppService/Reply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).Reply(ctx, req.(*WhatsAppReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsAppService_QR_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WhatsAppQRRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WhatsAppServiceServer).QR(m, &whatsAppServiceQRServer{stream})
}

type WhatsAppService_QRServer interface {
	Send(*WhatsAppQRResponse) error
	grpc.ServerStream
}

type whatsAppServiceQRServer struct {
	grpc.ServerStream
}

func (x *whatsAppServiceQRServer) Send(m *WhatsAppQRResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WhatsAppService_ServiceDesc is the grpc.ServiceDesc for WhatsAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhatsAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WhatsAppService",
	HandlerType: (*WhatsAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _WhatsAppService_Connect_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _WhatsAppService_Message_Handler,
		},
		{
			MethodName: "Reply",
			Handler:    _WhatsAppService_Reply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QR",
			Handler:       _WhatsAppService_QR_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "whatsapp.proto",
}
