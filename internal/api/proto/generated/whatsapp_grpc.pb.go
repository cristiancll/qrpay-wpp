// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: whatsapp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhatsAppServiceClient is the client API for WhatsAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhatsAppServiceClient interface {
	Get(ctx context.Context, in *WhatsAppGetRequest, opts ...grpc.CallOption) (*WhatsAppGetResponse, error)
	List(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*WhatsAppListResponse, error)
	QRCodeStream(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (WhatsAppService_QRCodeStreamClient, error)
}

type whatsAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhatsAppServiceClient(cc grpc.ClientConnInterface) WhatsAppServiceClient {
	return &whatsAppServiceClient{cc}
}

func (c *whatsAppServiceClient) Get(ctx context.Context, in *WhatsAppGetRequest, opts ...grpc.CallOption) (*WhatsAppGetResponse, error) {
	out := new(WhatsAppGetResponse)
	err := c.cc.Invoke(ctx, "/proto.WhatsAppService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsAppServiceClient) List(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*WhatsAppListResponse, error) {
	out := new(WhatsAppListResponse)
	err := c.cc.Invoke(ctx, "/proto.WhatsAppService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whatsAppServiceClient) QRCodeStream(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (WhatsAppService_QRCodeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &WhatsAppService_ServiceDesc.Streams[0], "/proto.WhatsAppService/QRCodeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &whatsAppServiceQRCodeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WhatsAppService_QRCodeStreamClient interface {
	Recv() (*WhatsApp, error)
	grpc.ClientStream
}

type whatsAppServiceQRCodeStreamClient struct {
	grpc.ClientStream
}

func (x *whatsAppServiceQRCodeStreamClient) Recv() (*WhatsApp, error) {
	m := new(WhatsApp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WhatsAppServiceServer is the server API for WhatsAppService service.
// All implementations must embed UnimplementedWhatsAppServiceServer
// for forward compatibility
type WhatsAppServiceServer interface {
	Get(context.Context, *WhatsAppGetRequest) (*WhatsAppGetResponse, error)
	List(context.Context, *VoidRequest) (*WhatsAppListResponse, error)
	QRCodeStream(*VoidRequest, WhatsAppService_QRCodeStreamServer) error
	mustEmbedUnimplementedWhatsAppServiceServer()
}

// UnimplementedWhatsAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWhatsAppServiceServer struct {
}

func (UnimplementedWhatsAppServiceServer) Get(context.Context, *WhatsAppGetRequest) (*WhatsAppGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWhatsAppServiceServer) List(context.Context, *VoidRequest) (*WhatsAppListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWhatsAppServiceServer) QRCodeStream(*VoidRequest, WhatsAppService_QRCodeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method QRCodeStream not implemented")
}
func (UnimplementedWhatsAppServiceServer) mustEmbedUnimplementedWhatsAppServiceServer() {}

// UnsafeWhatsAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhatsAppServiceServer will
// result in compilation errors.
type UnsafeWhatsAppServiceServer interface {
	mustEmbedUnimplementedWhatsAppServiceServer()
}

func RegisterWhatsAppServiceServer(s grpc.ServiceRegistrar, srv WhatsAppServiceServer) {
	s.RegisterService(&WhatsAppService_ServiceDesc, srv)
}

func _WhatsAppService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhatsAppGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WhatsAppService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).Get(ctx, req.(*WhatsAppGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsAppService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhatsAppServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WhatsAppService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhatsAppServiceServer).List(ctx, req.(*VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhatsAppService_QRCodeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VoidRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WhatsAppServiceServer).QRCodeStream(m, &whatsAppServiceQRCodeStreamServer{stream})
}

type WhatsAppService_QRCodeStreamServer interface {
	Send(*WhatsApp) error
	grpc.ServerStream
}

type whatsAppServiceQRCodeStreamServer struct {
	grpc.ServerStream
}

func (x *whatsAppServiceQRCodeStreamServer) Send(m *WhatsApp) error {
	return x.ServerStream.SendMsg(m)
}

// WhatsAppService_ServiceDesc is the grpc.ServiceDesc for WhatsAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhatsAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WhatsAppService",
	HandlerType: (*WhatsAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _WhatsAppService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WhatsAppService_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QRCodeStream",
			Handler:       _WhatsAppService_QRCodeStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "whatsapp.proto",
}
